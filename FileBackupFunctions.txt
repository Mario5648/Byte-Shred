import java.awt.Color;
import java.awt.event.*;
import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import static java.util.concurrent.TimeUnit.MILLISECONDS;

import javax.swing.*;

/************FileFunctions****************
 This class will contain all the
 functions needed to create the window and 
 to for the functionality 
 *****************************************/


public class FileBackupFunctions {
	
	//A Global static variable so other methods can change it during run-time
	static JPanel pane = new JPanel();

	/*----------------------
	 * BACKUP PANE ELEMENTS
	 -----------------------*/
	
	static String saveDir;
	static String saveLocationDir;
	static String sfolderName;

	//This will be what to save 
	static JTextField save = new JTextField();
	//Where to save 
	static JTextField saveLocation = new JTextField();
	
	//opens a file chooser
	static JButton saveFC = new JButton("Directory to save");
	//opens file chooser
	static JButton whereFC = new JButton("Save Location");
	//executes the backup process
	static JButton backupButton = new JButton("Backup Now!");

	
	
	/*----------------------
	 * RESTORE PANE ELEMENTS
	 -----------------------*/
	
	static String restoreDir;
	static String restoreLocationDir;
	static String srestoreFolderName;
	
	//This will be what to save 
	static JTextField restore = new JTextField();
	//Where to save 
	static JTextField restoreLocation = new JTextField();
	
	//opens a file chooser
	static JButton restoreFC = new JButton("Directory to restore");
	//opens file chooser
	static JButton restoreWhereFC = new JButton("Where to Restore");
	//executes the backup process
	static JButton restoreButton = new JButton("Restore Now!");
	
	
	/*-------------------------
	 * SCHEDULE PANE ELEMENTS
	 -------------------------*/
	static String whatTo;
	static String whereTo;
	static String autoTF;
	static String am_pm;
	
	
    static JRadioButton AM = new JRadioButton();
    static JRadioButton PM = new JRadioButton();
    static JRadioButton auto = new JRadioButton();

	
	static JTextField autoSave = new JTextField();
	static JButton autoFCSave = new JButton("Directory to Backup");
	
	
	static JTextField autoStore = new JTextField();
	static JButton autoFCStore = new JButton("Where to Backup");
	
	static String[] time = { "1:00", "2:00", "3:00", "4:00", "5:00","6:00","7:00","8:00","9:00","10:00","11:00","12:00" };
	static JComboBox timeList = new JComboBox(time);
	
	static JButton submit = new JButton("Submit");
	
	
	//This function will create the main window
	public static void windowGUI () {
		System.out.println("Window Launched");
		//This frame is the main frame for everything
		JFrame frame = new JFrame("File-Backup");
		frame.setBounds(20, 20, 700, 500);
		frame.setResizable(false);
		frame.setDefaultCloseOperation(frame.EXIT_ON_CLOSE);
		
		//pane that will change according to the button that is pressed 
		pane.setLayout(null);
		pane.setBounds(150, 0, 550, 500);
		pane.setBackground(Color.black);
		frame.add(pane);
		
		JPanel nav = new JPanel();
		nav.setLayout(null);
		nav.setBounds(0, 0, 150, 500);
		nav.setBackground(Color.BLUE);
		frame.add(nav);
		
		/* ----------------------------
		 NAV BUTTONS FOR THE SIDE MENU
		-------------------------------*/
		//This button will update the pane to show the backup pane (BACKUP)
		JButton backup = new JButton();
		backup.setText("Backup");
		backup.setBounds(20, 30, 100, 30);
		backup.addActionListener(new backupPane());
		nav.add(backup);
		
		//This button will update the pane to show the restore pane (RESTORE)
		JButton restore = new JButton();
		restore.setText("Restore");
		restore.setBounds(20, 70, 100, 30);
		restore.addActionListener(new restorePane());
		nav.add(restore);
		
		//This button will update the pane to show the schedule pane (SCHEDULE)
		JButton schedule = new JButton();
		schedule.setText("Schedule");
		schedule.setBounds(20, 110, 100, 30);
		schedule.addActionListener(new schedulePane());
		nav.add(schedule);
		
		//This button will update the pane to show the log pane (LOGS)
		JButton logs = new JButton();
		logs.setText("Logs");
		logs.setBounds(20, 150, 100, 30);
		nav.add(logs);
		
		
		
		
		
		
		
		//Sets the GUI to show 
		frame.setVisible(true);
	}
	
	//This will update the pane to the backup pane when the backup button is clicked
	public static class backupPane implements ActionListener{
		public void actionPerformed(ActionEvent e) {
			System.out.println("Launched backup pane");
			
			//The following three method calls will clear and update the pane 
			pane.removeAll();
			pane.revalidate();
			pane.repaint();
			//This will add the new objects in the panel and set their positions
			save.setBounds(150, 80, 300,30);
			save.setEditable(false);
			pane.add(save);
			
			saveFC.setBounds(220,120,150,30);
			saveFC.addActionListener(new findFile());
			pane.add(saveFC);
			
			saveLocation.setBounds(150, 160, 300,30);
			saveLocation.setEditable(false);
			pane.add(saveLocation);
			
			whereFC.setBounds(220,200,150,30);
			whereFC.addActionListener(new saveTo());
			pane.add(whereFC);
			
			
			backupButton.setBounds(220,280,150,30);
			backupButton.addActionListener(new backup());
			pane.add(backupButton);
		}
		
	}
	
	//This will update the pane to the restore pane when the restore  button is clicked
		public static class restorePane implements ActionListener{
			public void actionPerformed(ActionEvent e) {
				
				System.out.println("Launched restore pane");

				//The following three method calls will clear and update the pane 
				pane.removeAll();
				pane.revalidate();
				pane.repaint();
				//This will add the new objects in the panel and set their positions
				restore.setBounds(150, 80, 300,30);
				restore.setEditable(false);
				pane.add(restore);
				
				restoreFC.setBounds(220,120,150,30);
				restoreFC.addActionListener(new findFileRestore());
				pane.add(restoreFC);
				
				restoreLocation.setBounds(150, 160, 300,30);
				restoreLocation.setEditable(false);
				pane.add(restoreLocation);
				
				restoreWhereFC.setBounds(220,200,150,30);
				restoreWhereFC.addActionListener(new restoreTo());
				pane.add(restoreWhereFC);
				
				
				restoreButton.setBounds(220,280,150,30);
				restoreButton.addActionListener(new restore());
				pane.add(restoreButton);
			}
			
		}
		
		
		
		
		//This will update the pane to the restore pane when the restore  button is clicked
				public static class schedulePane implements ActionListener{
					public void actionPerformed(ActionEvent e) {
						
						System.out.println("Launched schedule pane");

						//The following three method calls will clear and update the pane 
						pane.removeAll();
						pane.revalidate();
						pane.repaint();
						//This will add the new objects in the panel and set their positions
						timeList.setBounds(150, 80, 300,30);
						pane.add(timeList);
						
						AM.setBounds(450,80,20,20);
						pane.add(AM);
						
						PM.setBounds(450,100,20,20);
						pane.add(PM);
						
						
						autoSave.setBounds(220,120,150,30);
						autoSave.setEditable(false);
						pane.add(autoSave);
						
						autoFCSave.setBounds(150, 160, 300,30);
						pane.add(autoFCSave);
						
						autoStore.setBounds(220,200,150,30);
						autoStore.setEditable(true);
						pane.add(autoStore);
						
						
						autoFCStore.setBounds(220,280,150,30);
						pane.add(autoFCStore);
						
						

						auto.setBounds(220,330,20,20);
						pane.add(auto);
						
						submit.setBounds(220,380,150,30);
						pane.add(submit);
					}
					
				}
			
	
		
		/************************************************
		 * open the file chooser to locate the wanted 
		 * directories for BACKUP 
		 ************************************************/
		
		//What to save
		public static class findFile implements ActionListener{
			public void actionPerformed(ActionEvent e) {
			/*This button once clicked gets the name of the direct path of the file*/
			JButton open = new JButton();
			/*This creates the GUI of the FileChooser*/
			JFileChooser fc = new JFileChooser();
			/*Start directory is set to the C:\ drive */
			fc.setCurrentDirectory(new java.io.File("C:\\"));
			fc.setDialogTitle("Backup");
			fc.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
			if(fc.showOpenDialog(open) == JFileChooser.APPROVE_OPTION) {
				/*File directory is saved to the fileDir string*/
				saveDir = fc.getSelectedFile().getAbsolutePath();
				save.setText(saveDir);
				System.out.println(saveDir);
			//If the JFileChooser is closed then it will not delete selected path	
			}else{
				saveDir = null;
				System.out.println("No File Selected");
			}
		}
	}
		
		//where to save
		public static class saveTo implements ActionListener{
			public void actionPerformed(ActionEvent e) {
			/*This button once clicked gets the name of the direct path of the file*/
			JButton open = new JButton();
			/*This creates the GUI of the FileChooser*/
			JFileChooser fc = new JFileChooser();
			/*Start directory is set to the C:\ drive */
			fc.setCurrentDirectory(new java.io.File("C:\\"));
			fc.setDialogTitle("Backup to");
			fc.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
			if(fc.showOpenDialog(open) == JFileChooser.APPROVE_OPTION) {
				/*File directory is saved to the fileDir string*/
				saveLocationDir = fc.getSelectedFile().getAbsolutePath();
				saveLocation.setText(saveLocationDir);
				System.out.println(saveLocationDir);
			//If the JFileChooser is closed then it will not delete selected path	
			}else{
				saveLocationDir = null;
				System.out.println("No File Selected");
			}
		}
	}
		
		
		
		
		/************************************************
		 * open the file chooser to locate the wanted 
		 * directories for RESTORE 
		 ************************************************/
		
		//What to save
		public static class findFileRestore implements ActionListener{
			public void actionPerformed(ActionEvent e) {
			/*This button once clicked gets the name of the direct path of the file*/
			JButton open = new JButton();
			/*This creates the GUI of the FileChooser*/
			JFileChooser fc = new JFileChooser();
			/*Start directory is set to the C:\ drive */
			fc.setCurrentDirectory(new java.io.File("C:\\"));
			fc.setDialogTitle("Restore");
			fc.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
			if(fc.showOpenDialog(open) == JFileChooser.APPROVE_OPTION) {
				/*File directory is saved to the fileDir string*/
				restoreDir = fc.getSelectedFile().getAbsolutePath();
				restore.setText(restoreDir);
				System.out.println(restoreDir);
			//If the JFileChooser is closed then it will not delete selected path	
			}else{
				restoreDir = null;
				System.out.println("No File Selected");
			}
		}
	}
		
		//where to save
		public static class restoreTo implements ActionListener{
			public void actionPerformed(ActionEvent e) {
			/*This button once clicked gets the name of the direct path of the file*/
			JButton open = new JButton();
			/*This creates the GUI of the FileChooser*/
			JFileChooser fc = new JFileChooser();
			/*Start directory is set to the C:\ drive */
			fc.setCurrentDirectory(new java.io.File("C:\\"));
			fc.setDialogTitle("Restore to");
			fc.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
			if(fc.showOpenDialog(open) == JFileChooser.APPROVE_OPTION) {
				/*File directory is saved to the fileDir string*/
				restoreLocationDir = fc.getSelectedFile().getAbsolutePath();
				restoreLocation.setText(restoreLocationDir);
				System.out.println(restoreLocationDir);
			//If the JFileChooser is closed then it will not delete selected path	
			}else{
				restoreLocationDir = null;
				System.out.println("No File Selected");
			}
		}
	}
		
		//This will allow a button to 
		public static class backup implements ActionListener {
			public void actionPerformed(ActionEvent arg0) {
				try {
					backup();
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
			
		}
		
		/**********************BACKUP FUNCTION****************
		 * This is the algorithm to backup the files to the wanted 
		 * directory
		 *
		 ******************************************************/
	public static void backup() throws IOException {
		//Stores all the folders and ads it to a list
		ArrayList<String> folders = new ArrayList<String>();
		//stores the previous directory so when it returns it will go back to the previous
		String prevSaveDir = saveDir;
		//stores the previous directory so when it returns it will go back to the previous (Backup Location)
		String prevSaveLocationDir = saveLocationDir;
		
		//the current directory
		File folder = new File(saveDir);
		//store all files in the current directory
		File[] listOfFiles = folder.listFiles();

		//loops through all the files checking if there is directories
		for (int i = 0; i < listOfFiles.length; i++) {
		 if (listOfFiles[i].isDirectory()) {
		    System.out.println("Directory " + listOfFiles[i].getName());
		    //if directories are found it will store it to the array 
		    folders.add(listOfFiles[i].getName());
		  
		 }
       
		}
		
		//If the arraylist is not empty then it will go by directories and recurse to the the next files
		if(folders.size() != 0) {
			//will go through all the folders stored in the arraylist
			for(int i = 0;i<folders.size();i++) {
			saveDir = prevSaveDir+"\\"+folders.get(i);
			
			System.out.println(saveDir);
			saveLocationDir = prevSaveLocationDir+"\\"+folders.get(i);
			new File(saveLocationDir).mkdirs();
			
			System.out.println(saveLocationDir);
			//recursive call
			backup();
			}
		}
		
		
		
		//Once function reaches the end it will now save all the files
		File files = new File(prevSaveDir);

		File[] listFiles = files.listFiles();
		System.out.println(saveDir);

		for (int i = 0; i < listFiles.length; i++) {
			 if (listFiles[i].isFile()) {
				 	//this copies the files to the backup location
				    Files.copy(Paths.get(listFiles[i].getAbsolutePath()),  
				            Paths.get(prevSaveLocationDir+"\\"+listFiles[i].getName() )); 
				 }
		  
		 }
		return;

       
		
		
}	
		
	
	//This will allow a button to 
			public static class restore implements ActionListener {
				public void actionPerformed(ActionEvent arg0) {
					try {
						restore();
					} catch (IOException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
				}
				
			}
			
			/**********************Restore FUNCTION****************
			 * This is the algorithm to backup the files to the wanted 
			 * directory
			 *
			 ******************************************************/
		public static void restore() throws IOException {
			//Stores all the folders and ads it to a list
			ArrayList<String> folders = new ArrayList<String>();
			//stores the previous directory so when it returns it will go back to the previous
			String prevRestoreDir = restoreDir;
			//stores the previous directory so when it returns it will go back to the previous (Backup Location)
			String prevRestoreLocationDir = restoreLocationDir;
			
			//the current directory
			File folder = new File(restoreDir);
			//store all files in the current directory
			File[] listOfFiles = folder.listFiles();

			//loops through all the files checking if there is directories
			for (int i = 0; i < listOfFiles.length; i++) {
			 if (listOfFiles[i].isDirectory()) {
			    System.out.println("Directory " + listOfFiles[i].getName());
			    //if directories are found it will store it to the array 
			    folders.add(listOfFiles[i].getName());
			  
			 }
	       
			}
			
			//If the arraylist is not empty then it will go by directories and recurse to the the next files
			if(folders.size() != 0) {
				//will go through all the folders stored in the arraylist
				for(int i = 0;i<folders.size();i++) {
				restoreDir = prevRestoreDir+"\\"+folders.get(i);
				
				System.out.println(restoreDir);
				restoreLocationDir = prevRestoreLocationDir+"\\"+folders.get(i);
				new File(restoreLocationDir).mkdirs();
				
				System.out.println(restoreLocationDir);
				//recursive call
				restore();
				}
			}
			
			
			
			//Once function reaches the end it will now save all the files
			File files = new File(prevRestoreDir);

			File[] listFiles = files.listFiles();
			System.out.println(restoreDir);

			for (int i = 0; i < listFiles.length; i++) {
				 if (listFiles[i].isFile()) {
					 	//this copies the files to the backup location
					    Files.copy(Paths.get(listFiles[i].getAbsolutePath()),  
					            Paths.get(prevRestoreLocationDir+"\\"+listFiles[i].getName() )); 
					 }
			  
			 }
			return;
			
	}	
		
	//Read files 
		
		
	/***************************************************
	 * This sets the automatic schedule according to the 
	 * input of the schedule pane.
	 **************************************************/
	public static void timer () {
		 Calendar calendar = Calendar.getInstance();
		 
	        // Set time of execution. Here, we have to run every day 4:20 PM; so,
	        // setting all parameters.
	        calendar.set(Calendar.HOUR, 5);
	        calendar.set(Calendar.MINUTE, 0);
	        calendar.set(Calendar.SECOND, 0);
	        calendar.set(Calendar.AM_PM, Calendar.PM);
	 
	        Long currentTime = new Date().getTime();
	 
	        // Check if current time is greater than our calendar's time. If So,
	        // then change date to one day plus. As the time already pass for
	        // execution.
	        if (calendar.getTime().getTime() < currentTime) {
	            calendar.add(Calendar.DATE, 1);
	        }
	 
	        // Calendar is scheduled for future; so, it's time is higher than
	        // current time.
	        long startScheduler = calendar.getTime().getTime() - currentTime;
	 
	        // Setting stop scheduler at 4:21 PM. Over here, we are using current
	        // calendar's object; so, date and AM_PM is not needed to set
	        calendar.set(Calendar.HOUR, 7);
	        calendar.set(Calendar.MINUTE, 0);
	        calendar.set(Calendar.AM_PM, Calendar.PM);
	 
	        // Calculation stop scheduler
	        long stopScheduler = calendar.getTime().getTime() - currentTime;
	 
	        // Executor is Runnable. The code which you want to run periodically.
	        Runnable task = new Runnable() {
	 
	            @Override
	            public void run() {
	            	try {
						backup();
					} catch (IOException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
	            }
	        };
	 
	        // Get an instance of scheduler
	        final ScheduledExecutorService scheduler = Executors.newScheduledThreadPool(1);
	        // execute scheduler at fixed time.
	        scheduler.scheduleAtFixedRate(task, startScheduler, stopScheduler, MILLISECONDS);
	    }
	
	
}
